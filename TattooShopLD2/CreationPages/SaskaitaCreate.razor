@page "/saskaitos/create"

@inject DataAccessMySql _data
@inject IConfiguration _config
@inject NavigationManager NavigationManager

<h3>Sukurti naujus saskaitos įrašus</h3>
<br />

<br />
@for(int i = 0; i < counter; i++)
{   
    <EditForm Model="@saskaitaModelList">
        <div class="form-group row col-md-12"> 
            <div class="col-md-2">
                <label for="data"> Data </label>
                <InputText id="data" @bind-Value="saskaitaModelList[i].Data" placeholder="pvz. 2022-10-02"></InputText>
            </div>
            <div class="col-md-2">
                <label for="kaina"> Kaina </label>
                <InputNumber id="kaina" @bind-Value="saskaitaModelList[i].Kaina" placeholder="pvz. 500"></InputNumber>
            </div>
            <div class="col-md-2">
                <label for="arbata"> Arbatpinigiai </label>
                <InputNumber id="arbata" @bind-Value="saskaitaModelList[i].Arbatpinigiai" placeholder="pvz. 20"></InputNumber>
            </div>
            <div class="col-md-2">
                <label for="saskId"> Sąskaitos Id </label>
                <InputNumber id="saskId" @bind-Value="saskaitaModelList[i].pk_SaskaitaId" placeholder="pvz. 125347"></InputNumber>
            </div>
            <div class="col-md-4">
                <label for="UzsTelNr"> Užsakymo Tel. Nr. </label>
                <InputSelect id="UzsTelNr" @bind-Value="saskaitaModelList[i].fk_UzsakymasTelNr">
                    @foreach (var tel in uzsakymoTelNr)
                    {
                        <option value="@tel.pk_TelNr">@tel.pk_TelNr</option>
                    }
                </InputSelect>
            </div>
         </div>
    </EditForm>
    <br />
}
<button class="btn btn-primary"  @onclick="Increment">Pridėti eilutę</button>
<br/>
<div></div>
<br/>
<button class="btn btn-primary" @onclick="Insert">Sukurti naują įrašą</button>

@code {
    SaskaitaModel saskaitaModel = new SaskaitaModel();
    List<SaskaitaModel> saskaitaModelList = new List<SaskaitaModel>();
    int counter = 1;
    List<UzsakymasModel> uzsakymoTelNr = new List<UzsakymasModel>();

    private void Increment()
    {
        counter++;
    }
    private void Insert()
    {
        string sql =
        "insert into sąskaita (data, kaina, Arbatpinigiai, id_SĄSKAITA, fk_UZSAKYMAStelNr) values (?Data, ?Kaina, ?Arbatpinigiai, ?pk_SaskaitaId, ?fk_UzsakymasTelNr)";
        foreach (var obj in saskaitaModelList)
        {
            if (obj.pk_SaskaitaId != 0)
            {
                DataAccessMySql.Insert(sql, _config.GetConnectionString("default"), args =>
                {
                    args.Add("?Data", MySqlDbType.VarChar).Value = obj.Data;
                    args.Add("?Kaina", MySqlDbType.Int32).Value = obj.Kaina;
                    args.Add("?Arbatpinigiai", MySqlDbType.Int32).Value = obj.Arbatpinigiai;
                    args.Add("?pk_SaskaitaId", MySqlDbType.Int32).Value = obj.pk_SaskaitaId;
                    args.Add("?fk_UzsakymasTelNr", MySqlDbType.VarChar).Value = obj.fk_UzsakymasTelNr;
                });
            }
        }
        NavigationManager.NavigateTo("/saskaitos/create", true);
    }

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < 10; i++)
        {
            saskaitaModelList.Add(new SaskaitaModel
            {
                Data = "temp",
                Kaina = 0,
                Arbatpinigiai = 0,
                pk_SaskaitaId = 0,
                fk_UzsakymasTelNr = "temp"
            });
        }
        string sql = "select * from uzsakymas";
        var dt = _data.Query(sql, _config.GetConnectionString("default"));
        foreach( DataRow item in dt)
        {
            uzsakymoTelNr.Add(new UzsakymasModel
                {
                    pk_TelNr = Convert.ToString(item["telNr"]),
                    Vardas = Convert.ToString(item["Vardas"]),
                    Pavarde = Convert.ToString(item["Pavardė"]),
                    ArSpalvota = Convert.ToInt32(item["arSpalvota"]),
                    GalutineKaina = Convert.ToInt32(item["galutineKaina"]),
                    TattooStilius = Convert.ToString(item["tattooStilius"]),
                    Nuskausminamieji = Convert.ToInt32(item["nuskausminamieji"]),
                    KunoVieta = Convert.ToString(item["kunoVieta"]),
                    TattooDydis = Convert.ToString(item["tatDydis"]),
                    UzsakymoBusena = Convert.ToString(item["užsakymoBūsena"]),
                    UzsakymoData = Convert.ToString(item["uzsakymoData"]),
                    fk_KlientasTelNr = Convert.ToString(item["fk_KLIENTASTelNr"]),
                    fk_TattooMeistrasTelNr = Convert.ToString(item["fk_TATUIRUOČIŲ_MEISTRAStelNr"]),
                });
        }
    }
}
